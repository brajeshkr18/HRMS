@model HRMS.ViewModel.Model.Users.UserViewModel
@using HRMS.Web.Helper
@using HRMS.Utility
@using HRMS.Model.Master;
@using HRMS.Model.Users;
@using System.Collections.Generic
@using HRMS.Utility.Helper

@{
    ViewBag.Title = "User Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
    UserTypeViewModel userType = null;
    Qparams qparams = new Qparams();
    if (TempData["qparams"] != null)
    {
        qparams = (Qparams)TempData.Peek("qparams");
    }

    List<UserTypeViewModel> userTypes = ViewBag.UserTypes as List<UserTypeViewModel>;
    if (userTypes != null && userTypes.Count == 1)
    {
        userType = userTypes.SingleOrDefault();
        ViewBag.Title = "Manage " + userType.Name;
    }
    var LoggedInUserType = UserAuthenticate.Role;

}
<style>
    .greybg {
        
    }
       .amount-text-dollor { position:absolute; top:10px;left: 0px;}
    .amount-text{ padding-left:20px!important;}
</style>
<div class="content-inner">
    <!-- Page Header-->
    <header class="page-header">
        <div class="container-fluid">
            <h2 class="no-margin-bottom">@ViewBag.Title</h2>
        </div>
    </header>
    <!-- Forms Section-->
    <section class="forms">
        <div class="container-fluid">
            <div class="row">
                <!-- Form Elements -->
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @using (Html.BeginForm("UserDetails", "User", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(model => model.Id)
                        @*@Html.HiddenFor(model => model.VehicleId)*@
                    if (Model != null)
                    {
                        @Html.Hidden("hdnReportingTo", Model.ReportingTo)
                    }
                   


                    <div class="card">
                        <div class="card-header d-flex align-items-center">
                            <h3 class="h4">Basic Detail</h3>
                        </div>
                        <div class="card-body">
                                @if (userType != null)
                                {
                                    @Html.HiddenFor(model => model.UserTypeId, new { @class = "control-label", Value = userType.Id })
                                }
                                else
                                {
                                    <div class="form-group-material">
                                        @Html.LabelFor(model => model.UserTypeId, htmlAttributes: new { @class = "control-label col-md-3 col-sm-3 col-xs-12" })
                                        <div class="col-md-6 col-sm-6 col-xs-12">
                                            @Html.DropDownListFor(x => x.UserTypeId, new SelectList(@ViewBag.UserTypes, "Id", "Name"), "-- Select User Type --", new { @class = "form-control scrollable-menu", @onchange = "GetReportingConfig()" })
                                            @Html.ValidationMessageFor(m => m.UserTypeId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>                            
                                }


                                <div class="form-group row">
                                    <div class="col-sm-12">
                                        <div class="row">
                                            <div class="col-md-6 col-sm-6 col-xs-6">
                                                @Html.TextBoxFor(x => x.FirstName, new { @class = "input-material" })
                                                @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "label-material" })
                                                @Html.ValidationMessageFor(m => m.FirstName, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-6 col-sm-6 col-xs-6">
                                                @Html.TextBoxFor(x => x.LastName, new { @class = "input-material" })
                                                @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "label-material" })
                                                @Html.ValidationMessageFor(m => m.LastName, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>



                                <div class="form-group row">
                                    @*<label class="col-sm-3 form-control-label">Column sizing</label>*@
                                    <div class="col-sm-12">
                                        <div class="row">
                                            @*@if (Model == null || Model.Id == 0)
                                            {*@
                                                <div class="col-md-6 col-sm-6 col-xs-6">
                                                    @Html.TextBoxFor(x => x.Email, new { @class = "input-material" })
                                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "label-material" })
                                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-md-6 col-sm-6 col-xs-6">
                                                    @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "input-material", @maxlength = 10 })
                                                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "label-material" })
                                                    @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
                                                </div>
                                            @*}
                                            else
                                            {

                                                <div class="col-md-6 col-sm-6 col-xs-6">
                                                    @Html.TextBoxFor(x => x.Email, new { @class = "input-material", @readonly = "readonly" })
                                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "label-material" })
                                                    @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                                                </div>
                                                <div class="col-md-6 col-sm-6 col-xs-6">
                                                    @Html.TextBoxFor(x => x.PhoneNumber, new { @class = "input-material", @maxlength = 10 })
                                                    @Html.LabelFor(model => model.PhoneNumber, htmlAttributes: new { @class = "label-material" })
                                                    @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
                                                </div>
                                            }*@
                                        </div>
                                    </div>
                                </div>


                            
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-header d-flex align-items-center">
                            <h3 class="h4">Payment Detail</h3>
                        </div>
                        @*<div class="card-body">
                                <div class="form-group row">
                                    <div class="col-sm-12">
                                        <div class="row">
                                            <div class="col-md-6 col-sm-6 col-xs-6">
                                                <span class="amount-text-dollor">$</span>
                                                @Html.TextBoxFor(x => x.UserDetails.CostPerMile, new { @class = "input-material" })
                                                @Html.LabelFor(model => model.UserDetails.CostPerMile, htmlAttributes: new { @class = "label-material" })
                                                @Html.ValidationMessageFor(m => m.UserDetails.CostPerMile, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col-md-6 col-sm-6 col-xs-6">
                                                <span class="amount-text-dollor">$</span>
                                                @Html.TextBoxFor(x => x.UserDetails.CostPerMinute, new { @class = "input-material", @maxlength = 50 })
                                                @Html.LabelFor(model => model.UserDetails.CostPerMinute, htmlAttributes: new { @class = "label-material" })
                                                @Html.ValidationMessageFor(m => m.UserDetails.CostPerMinute, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <div class="ln_solid"></div>
                            <div>
                                <div class="form-group-material">
                                    <a href="@Url.Action("ManageUsers", "User", new { data = SecurityHelper.Encrypt(Newtonsoft.Json.JsonConvert.SerializeObject(qparams)) })" class="btn btn-secondary" name="Cancel">Cancel</a>
                                    <button id="save" type="submit" class="btn btn-primary" name="submitButton">Save</button>
                                </div>
                            </div>
                        </div>*@
                    </div>
                     
                        }
                </div>
             
            </div>
            <br />
        </div>
    </section>
    <footer class="main-footer" style="padding-top:44px;">
        <div class="container-fluid">
            <div class="row">
                @*<div class="col-sm-6">
                        <p>Transport Management System © 2017-2019</p>
                    </div>
                    <div class="col-sm-6 text-right">
                        Designed by <a href="#" class="external">Transport Management System</a>

                    </div>*@
            </div>
        </div>
    </footer>
</div>


    @*@Scripts.Render("~/bundles/validations/js")
    @Scripts.Render("~/bundles/jqueryval")*@
    @*<link rel="stylesheet" href="http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css">
        <script src="http://code.jquery.com/ui/1.10.3/jquery-ui.js"></script>*@
    <!-- for colapsible panel-->
    @*<link href="~/Content/jquery-ui.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-ui.js"></script>*@
    
    <script>
    $(document).ready(function () {
        $('.datepicker').datepicker({
            format: 'd M yyyy'
        });
         if ("@LoggedInUserType" != "Admin") {
             if (@Model.Id != 0) {
                 $("#UserDetails_CostPerMile").attr('readonly', 'readonly');
                 $("#UserDetails_CostPerMinute").attr('readonly', 'readonly');
             }
            }
        var url = '@Url.Action("RenderPartialDriverPerformance", "User")';
        $('#btnsubmit').click(function () {

            var from = $('#txtFrom').val();
            var to = $('#txtTo').val();
            var DriverId =$("#Id").val()
            //$('#searchResults').load(url, { startDate: from, endDate: to });
            $.ajax({
                type: "GET", //HTTP GET Method
                url: "/User/RenderPartialDriverPerformance", // Controller/View
                data: {
                    startDate: from,
                    endDate: to,
                    DriverId: DriverId
                },
                datatype: "json", // refer notes below
                success: function (data) {
                    fillListData(data);
                },
                error: function (jqXHR, status, err) {//status is Error and the errorThrown is undefined
                    //$.toastAlert("Error", "Request Status : " + jqXHR.status + " has issued a status text of  : " + jqXHR.statusText + "", "error");
                }
            });
        })
    });
    function fillListData(result) {
        $('#dvpartialtable').html(result);

    }
    </script>
    @if (TempData["result"] != null)
    {
        MyJsonResult result = TempData["result"] as MyJsonResult;

        if (result.isSuccess == true)
        {
            <script>
                $.toastAlert("Success", "@result.message", "success");
            </script>
        }
        else
        {
            <script>
                $.toastAlert("Error", "@result.message", "error");
            </script>
        }

        var resultData = @TempData.Remove("result");
    }

